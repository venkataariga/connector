package com.solace.connector;

import java.util.Arrays;
import java.util.Iterator;
import java.util.regex.Pattern;
import javax.naming.NamingException;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function2; 
import org.apache.spark.api.java.function.PairFunction; 
import org.apache.spark.storage.StorageLevel;
import org.apache.spark.streaming.Duration;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import scala.Tuple2;
import com.google.common.collect.Lists;


public class SparkStreamer {
	

	private static final Pattern SPACE = Pattern.compile(" ");
	
	public static void main(String[] args) throws InterruptedException {
		
		if (args.length < 6) {
			System.err.println("Usage: JMSReceiverTest <brokerURL> <vpn> <username>  "+ 
			"<password> <queue> <connectionFactory>");
			System.exit(1);
			}
		
		// Create the context with a 1 second batch size
		SparkConf sparkConf = new SparkConf().setAppName("JavaCustomReceiver");
		JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, new Duration(1000));
		
		// Create a input stream with the custom receiver on target ip:port and count
		// words in input stream of \n delimited text (eg. generated by 'nc')
		JavaReceiverInputDStream<String> lines;
		
		lines = ssc.receiverStream(
				new JMSReciever(args[0], args[1], args[2], args[3], args[4],
				args[5], StorageLevel.MEMORY_ONLY_SER_2()));
		
		JavaDStream<String> words = lines.flatMap(new FlatMapFunction<String,String>() {
			@Override
			public Iterator<String> call(String x) {
				return Arrays.asList(x.split(" ")).iterator();}
		});
				
		JavaPairDStream<String, Integer> wordCounts = words.mapToPair( new PairFunction<String, String, Integer>() {
		@Override 
		public Tuple2<String, Integer> call(String s) 
		{ 
			return new Tuple2<String, Integer>(s, 1);
				}
				}).reduceByKey(new Function2<Integer, Integer, Integer>() {
				
				@Override
				public Integer call(Integer i1, Integer i2) { return i1 + i2;
				} });
				wordCounts.print();
				ssc.start();
				ssc.awaitTermination();
				ssc.close();
				 
				 
				}
}
